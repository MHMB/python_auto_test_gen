# Automatically generated by Pynguin.
import pytest
import blood_sugar_algorithm_refactored as module_0
import datetime as module_1

@pytest.mark.xfail
def test_case_0():
    int_0 = 2425
    str_0 = 'poK\nT8SB%@'
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    module_0.BloodSugar(int_0, int_0, str_0, datetime_0)

@pytest.mark.xfail
def test_case_1():
    int_0 = 329
    int_1 = -1688
    str_0 = 'bs5<}'
    none_type_0 = None
    module_0.BloodSugar(int_0, int_1, str_0, none_type_0)

def test_case_2():
    bool_0 = True
    bool_1 = False
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    bool_2 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_1)
    assert bool_2 is True
    assert blood_sugar_algorithm_0.diabetes_type_1 is True

def test_case_3():
    none_type_0 = None
    bool_0 = True
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    bool_1 = blood_sugar_algorithm_0.set_patient_medical_record(none_type_0, bool_0)
    assert bool_1 is True
    assert blood_sugar_algorithm_0.diabetes_type_2 is True

def test_case_4():
    none_type_0 = None
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    str_0 = blood_sugar_algorithm_0.normal_person_bs(none_type_0)
    assert str_0 == 'SCBSN000'

def test_case_5():
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']

def test_case_6():
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']

@pytest.mark.xfail
def test_case_7():
    int_0 = 2963
    none_type_0 = None
    str_0 = 'zEO>c7lsB+H&E_'
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    blood_sugar_algorithm_0.set_prev_bs_info(int_0, none_type_0, str_0)

@pytest.mark.xfail
def test_case_8():
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    blood_sugar_algorithm_0.init_data()

@pytest.mark.xfail
def test_case_9():
    int_0 = -642
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    str_0 = '%s'
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    blood_sugar_algorithm_0.set_prev_bs_info(int_0, datetime_0, str_0)

@pytest.mark.xfail
def test_case_10():
    str_0 = 'X]U{RJAH|^aVu'
    none_type_0 = None
    int_0 = 95
    module_0.BloodSugar(int_0, int_0, str_0, none_type_0)

@pytest.mark.xfail
def test_case_11():
    int_0 = 137
    str_0 = "XHo\x0c'%v[$Nz["
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    blood_sugar_algorithm_0.set_prev_bs_info(int_0, datetime_0, str_0)

@pytest.mark.xfail
def test_case_12():
    int_0 = 30
    str_0 = 'FBS'
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    blood_sugar_0 = module_0.BloodSugar(int_0, int_0, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 30
    assert blood_sugar_0.temperature == 30
    assert blood_sugar_0.measure_state == 'FBS'
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    blood_sugar_algorithm_0.check_prev_bs(blood_sugar_0)

@pytest.mark.xfail
def test_case_13():
    none_type_0 = None
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    bool_0 = False
    bool_1 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_0)
    assert bool_1 is True
    assert blood_sugar_algorithm_0.diabetes_type_2 is False
    bool_2 = blood_sugar_algorithm_0.set_patient_medical_record(bool_1, bool_1)
    assert bool_2 is True
    assert blood_sugar_algorithm_0.diabetes_type_1 is True
    blood_sugar_algorithm_0.diabetic_persons_bs(none_type_0)

@pytest.mark.xfail
def test_case_14():
    none_type_0 = None
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    none_type_1 = None
    bool_0 = True
    bool_1 = blood_sugar_algorithm_0.set_patient_medical_record(none_type_1, bool_0)
    assert bool_1 is True
    assert blood_sugar_algorithm_0.diabetes_type_2 is True
    blood_sugar_algorithm_0.diabetic_persons_bs(none_type_0)

@pytest.mark.xfail
def test_case_15():
    int_0 = 30
    str_0 = 'FBS'
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    blood_sugar_0 = module_0.BloodSugar(int_0, int_0, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 30
    assert blood_sugar_0.temperature == 30
    assert blood_sugar_0.measure_state == 'FBS'
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    str_1 = blood_sugar_algorithm_0.check_super_high_bs(blood_sugar_0)
    assert str_1 == 'SCBSN000'
    blood_sugar_algorithm_0.check_prev_bs(blood_sugar_0)

@pytest.mark.xfail
def test_case_16():
    int_0 = 30
    str_0 = 'FBS'
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    blood_sugar_0 = module_0.BloodSugar(int_0, int_0, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 30
    assert blood_sugar_0.temperature == 30
    assert blood_sugar_0.measure_state == 'FBS'
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    blood_sugar_algorithm_0.normal_person_faten_bs(blood_sugar_0)