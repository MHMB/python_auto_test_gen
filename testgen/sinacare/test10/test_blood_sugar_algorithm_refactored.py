# Automatically generated by Pynguin.
import pytest
import blood_sugar_algorithm_refactored as module_0
import datetime as module_1

@pytest.mark.xfail
def test_case_0():
    none_type_0 = None
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    str_0 = blood_sugar_algorithm_0.normal_person_bs(none_type_0)
    assert str_0 == 'SCBSN000'
    bool_0 = True
    bool_1 = False
    bool_2 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_1)
    assert bool_2 is True
    assert blood_sugar_algorithm_0.diabetes_type_1 is True
    str_1 = 'o()'
    none_type_1 = None
    int_0 = 869
    blood_sugar_algorithm_0.set_prev_bs_info(int_0, none_type_1, str_1)

@pytest.mark.xfail
def test_case_1():
    int_0 = -33
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    str_0 = 'N\x0c/'
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    blood_sugar_algorithm_0.set_prev_bs_info(int_0, datetime_0, str_0)

def test_case_2():
    bool_0 = True
    bool_1 = False
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    bool_2 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_1)
    assert bool_2 is True
    assert blood_sugar_algorithm_0.diabetes_type_1 is True

def test_case_3():
    bool_0 = False
    bool_1 = True
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    bool_2 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_1)
    assert bool_2 is True
    assert blood_sugar_algorithm_0.diabetes_type_2 is True
    blood_sugar_algorithm_1 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_1.patient is None
    assert blood_sugar_algorithm_1.hypoglycemia is None
    assert blood_sugar_algorithm_1.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_1.abnormal_bs is None
    assert blood_sugar_algorithm_1.emergency_alarm is None
    assert blood_sugar_algorithm_1.bs_type is None
    assert blood_sugar_algorithm_1.new_measurement_required is None
    assert blood_sugar_algorithm_1.new_measurement_duration_min is None
    assert blood_sugar_algorithm_1.graphic_asset is None
    assert blood_sugar_algorithm_1.message_list == []
    assert blood_sugar_algorithm_1.last_bs is None

def test_case_4():
    none_type_0 = None
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    str_0 = blood_sugar_algorithm_0.normal_person_bs(none_type_0)
    assert str_0 == 'SCBSN000'

def test_case_5():
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']

def test_case_6():
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']

@pytest.mark.xfail
def test_case_7():
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    blood_sugar_algorithm_0.init_data()

@pytest.mark.xfail
def test_case_8():
    int_0 = 41
    str_0 = 'h0'
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    module_0.BloodSugar(int_0, int_0, str_0, datetime_0)

@pytest.mark.xfail
def test_case_9():
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    int_0 = 74
    int_1 = -390
    str_0 = '$T'
    module_0.BloodSugar(int_0, int_1, str_0, datetime_0)

@pytest.mark.xfail
def test_case_10():
    int_0 = 378
    int_1 = 194
    none_type_0 = None
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    module_0.BloodSugar(int_0, int_1, none_type_0, datetime_0)

@pytest.mark.xfail
def test_case_11():
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    int_0 = 280
    int_1 = -10
    str_0 = 'FBS'
    blood_sugar_0 = module_0.BloodSugar(int_0, int_1, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 280
    assert blood_sugar_0.temperature == -10
    assert blood_sugar_0.measure_state == 'FBS'
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    str_1 = blood_sugar_algorithm_0.check_prev_bs(blood_sugar_0)
    assert str_1 == 'SCBSN000'
    blood_sugar_algorithm_1 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_1.patient is None
    assert blood_sugar_algorithm_1.hypoglycemia is None
    assert blood_sugar_algorithm_1.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_1.abnormal_bs is None
    assert blood_sugar_algorithm_1.emergency_alarm is None
    assert blood_sugar_algorithm_1.bs_type is None
    assert blood_sugar_algorithm_1.new_measurement_required is None
    assert blood_sugar_algorithm_1.new_measurement_duration_min is None
    assert blood_sugar_algorithm_1.graphic_asset is None
    assert blood_sugar_algorithm_1.message_list == []
    assert blood_sugar_algorithm_1.last_bs is None
    blood_sugar_algorithm_1.check_super_high_bs(blood_sugar_0)

@pytest.mark.xfail
def test_case_12():
    none_type_0 = None
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    bool_0 = False
    bool_1 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_0)
    assert bool_1 is True
    assert blood_sugar_algorithm_0.diabetes_type_2 is False
    bool_2 = blood_sugar_algorithm_0.set_patient_medical_record(bool_1, bool_0)
    assert bool_2 is True
    assert blood_sugar_algorithm_0.diabetes_type_1 is True
    blood_sugar_algorithm_0.diabetic_persons_bs(none_type_0)

@pytest.mark.xfail
def test_case_13():
    none_type_0 = None
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    bool_0 = False
    bool_1 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_0)
    assert bool_1 is True
    assert blood_sugar_algorithm_0.diabetes_type_2 is False
    bool_2 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_1)
    assert bool_2 is True
    assert blood_sugar_algorithm_0.diabetes_type_2 is True
    blood_sugar_algorithm_0.diabetic_persons_bs(none_type_0)

@pytest.mark.xfail
def test_case_14():
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    int_0 = 64
    int_1 = -10
    str_0 = 'FBS'
    blood_sugar_0 = module_0.BloodSugar(int_0, int_1, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 64
    assert blood_sugar_0.temperature == -10
    assert blood_sugar_0.measure_state == 'FBS'
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    str_1 = blood_sugar_algorithm_0.check_prev_bs(blood_sugar_0)
    assert str_1 == 'SCBSN000'
    str_2 = blood_sugar_algorithm_0.normal_person_bs(blood_sugar_0)
    assert str_2 == 'SCBSN000'
    str_3 = blood_sugar_algorithm_0.normal_person_bs(blood_sugar_0)
    assert str_3 == 'SCBSN000'
    bool_0 = False
    bool_1 = False
    blood_sugar_algorithm_1 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_1.patient is None
    assert blood_sugar_algorithm_1.hypoglycemia is None
    assert blood_sugar_algorithm_1.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_1.abnormal_bs is None
    assert blood_sugar_algorithm_1.emergency_alarm is None
    assert blood_sugar_algorithm_1.bs_type is None
    assert blood_sugar_algorithm_1.new_measurement_required is None
    assert blood_sugar_algorithm_1.new_measurement_duration_min is None
    assert blood_sugar_algorithm_1.graphic_asset is None
    assert blood_sugar_algorithm_1.message_list == []
    assert blood_sugar_algorithm_1.last_bs is None
    str_4 = blood_sugar_algorithm_1.check_super_high_bs(blood_sugar_0)
    assert str_4 == 'SCBSN000'
    bool_2 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_1)
    assert bool_2 is True
    assert blood_sugar_algorithm_0.diabetes_type_2 is False
    blood_sugar_algorithm_2 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_2.patient is None
    assert blood_sugar_algorithm_2.hypoglycemia is None
    assert blood_sugar_algorithm_2.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_2.abnormal_bs is None
    assert blood_sugar_algorithm_2.emergency_alarm is None
    assert blood_sugar_algorithm_2.bs_type is None
    assert blood_sugar_algorithm_2.new_measurement_required is None
    assert blood_sugar_algorithm_2.new_measurement_duration_min is None
    assert blood_sugar_algorithm_2.graphic_asset is None
    assert blood_sugar_algorithm_2.message_list == []
    assert blood_sugar_algorithm_2.last_bs is None
    blood_sugar_algorithm_0.diabetic_persons_bs(blood_sugar_0)

@pytest.mark.xfail
def test_case_15():
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    datetime_1 = module_0.random_datetime()
    int_0 = 281
    int_1 = 57
    str_0 = 'FBS'
    blood_sugar_0 = module_0.BloodSugar(int_0, int_1, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 281
    assert blood_sugar_0.temperature == 57
    assert blood_sugar_0.measure_state == 'FBS'
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    blood_sugar_algorithm_1 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_1.patient is None
    assert blood_sugar_algorithm_1.hypoglycemia is None
    assert blood_sugar_algorithm_1.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_1.abnormal_bs is None
    assert blood_sugar_algorithm_1.emergency_alarm is None
    assert blood_sugar_algorithm_1.bs_type is None
    assert blood_sugar_algorithm_1.new_measurement_required is None
    assert blood_sugar_algorithm_1.new_measurement_duration_min is None
    assert blood_sugar_algorithm_1.graphic_asset is None
    assert blood_sugar_algorithm_1.message_list == []
    assert blood_sugar_algorithm_1.last_bs is None
    str_1 = blood_sugar_algorithm_1.check_prev_bs(blood_sugar_0)
    assert str_1 == 'SCBSN000'
    blood_sugar_algorithm_2 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_2.patient is None
    assert blood_sugar_algorithm_2.hypoglycemia is None
    assert blood_sugar_algorithm_2.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_2.abnormal_bs is None
    assert blood_sugar_algorithm_2.emergency_alarm is None
    assert blood_sugar_algorithm_2.bs_type is None
    assert blood_sugar_algorithm_2.new_measurement_required is None
    assert blood_sugar_algorithm_2.new_measurement_duration_min is None
    assert blood_sugar_algorithm_2.graphic_asset is None
    assert blood_sugar_algorithm_2.message_list == []
    assert blood_sugar_algorithm_2.last_bs is None
    blood_sugar_algorithm_1.normal_person_faten_bs(blood_sugar_0)

@pytest.mark.xfail
def test_case_16():
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    int_0 = 58
    int_1 = -10
    str_0 = 'FBS'
    blood_sugar_0 = module_0.BloodSugar(int_0, int_1, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 58
    assert blood_sugar_0.temperature == -10
    assert blood_sugar_0.measure_state == 'FBS'
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    blood_sugar_algorithm_0.check_prev_bs(blood_sugar_0)

@pytest.mark.xfail
def test_case_17():
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    int_0 = 56
    str_0 = 'FBS'
    blood_sugar_0 = module_0.BloodSugar(int_0, int_0, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 56
    assert blood_sugar_0.temperature == 56
    assert blood_sugar_0.measure_state == 'FBS'
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    bool_0 = blood_sugar_algorithm_0.set_prev_bs_info(int_0, datetime_0, str_0)
    assert bool_0 is True
    blood_sugar_algorithm_0.check_prev_bs(blood_sugar_0)

@pytest.mark.xfail
def test_case_18():
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    int_0 = 64
    int_1 = -10
    str_0 = 'FBS'
    blood_sugar_0 = module_0.BloodSugar(int_0, int_1, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 64
    assert blood_sugar_0.temperature == -10
    assert blood_sugar_0.measure_state == 'FBS'
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    str_1 = blood_sugar_algorithm_0.check_prev_bs(blood_sugar_0)
    assert str_1 == 'SCBSN000'
    str_2 = blood_sugar_algorithm_0.normal_person_bs(blood_sugar_0)
    assert str_2 == 'SCBSN000'
    str_3 = blood_sugar_algorithm_0.normal_person_bs(blood_sugar_0)
    assert str_3 == 'SCBSN000'
    blood_sugar_algorithm_0.normal_person_faten_bs(blood_sugar_0)

@pytest.mark.xfail
def test_case_19():
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    int_0 = 122
    int_1 = 57
    str_0 = 'FBS'
    blood_sugar_0 = module_0.BloodSugar(int_0, int_1, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 122
    assert blood_sugar_0.temperature == 57
    assert blood_sugar_0.measure_state == 'FBS'
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    blood_sugar_algorithm_0.normal_person_faten_bs(blood_sugar_0)