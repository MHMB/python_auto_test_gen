# Automatically generated by Pynguin.
import pytest
import blood_sugar_algorithm_refactored as module_0
import datetime as module_1

@pytest.mark.xfail
def test_case_0():
    int_0 = 1930
    str_0 = 'fJ\r\r'
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    module_0.BloodSugar(int_0, int_0, str_0, datetime_0)

@pytest.mark.xfail
def test_case_1():
    int_0 = 371
    str_0 = 'k\rB.c!)|`67?'
    none_type_0 = None
    module_0.BloodSugar(int_0, int_0, str_0, none_type_0)

def test_case_2():
    bool_0 = True
    bool_1 = False
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    bool_2 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_1)
    assert bool_2 is True
    assert blood_sugar_algorithm_0.diabetes_type_1 is True

def test_case_3():
    bool_0 = False
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    bool_1 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_0)
    assert bool_1 is True
    assert blood_sugar_algorithm_0.diabetes_type_2 is False

def test_case_4():
    none_type_0 = None
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    str_0 = blood_sugar_algorithm_0.normal_person_bs(none_type_0)
    assert str_0 == 'SCBSN000'

def test_case_5():
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']

def test_case_6():
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']

@pytest.mark.xfail
def test_case_7():
    int_0 = -217
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    str_0 = '\x0bW!5'
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    blood_sugar_algorithm_0.set_prev_bs_info(int_0, datetime_0, str_0)

@pytest.mark.xfail
def test_case_8():
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    blood_sugar_algorithm_0.init_data()

@pytest.mark.xfail
def test_case_9():
    int_0 = -2088
    int_1 = -476
    str_0 = '@~~TsM6l_M%[8xsQfqCn'
    none_type_0 = None
    module_0.BloodSugar(int_0, int_1, str_0, none_type_0)

@pytest.mark.xfail
def test_case_10():
    int_0 = 298
    int_1 = -943
    bool_0 = False
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    bool_1 = True
    bool_2 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_1)
    assert bool_2 is True
    assert blood_sugar_algorithm_0.diabetes_type_2 is True
    str_0 = '~\rsD^i\r5QQNqk\tM@C>'
    datetime_0 = module_0.random_datetime()
    module_0.BloodSugar(int_0, int_1, str_0, datetime_0)

@pytest.mark.xfail
def test_case_11():
    int_0 = 167
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    none_type_0 = None
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    blood_sugar_algorithm_0.set_prev_bs_info(int_0, datetime_0, none_type_0)

@pytest.mark.xfail
def test_case_12():
    none_type_0 = None
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    bool_0 = False
    bool_1 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_0)
    assert bool_1 is True
    assert blood_sugar_algorithm_0.diabetes_type_2 is False
    bool_2 = blood_sugar_algorithm_0.set_patient_medical_record(bool_1, bool_0)
    assert bool_2 is True
    assert blood_sugar_algorithm_0.diabetes_type_1 is True
    blood_sugar_algorithm_0.diabetic_persons_bs(none_type_0)

@pytest.mark.xfail
def test_case_13():
    none_type_0 = None
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    bool_0 = False
    bool_1 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_0)
    assert bool_1 is True
    assert blood_sugar_algorithm_0.diabetes_type_2 is False
    str_0 = blood_sugar_algorithm_0.normal_person_bs(none_type_0)
    assert str_0 == 'SCBSN000'
    bool_2 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_1)
    assert bool_2 is True
    assert blood_sugar_algorithm_0.diabetes_type_2 is True
    blood_sugar_algorithm_0.diabetic_persons_bs(none_type_0)

@pytest.mark.xfail
def test_case_14():
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    datetime_0 = module_0.random_datetime()
    int_0 = 53
    str_0 = 'FBS'
    blood_sugar_0 = module_0.BloodSugar(int_0, int_0, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 53
    assert blood_sugar_0.temperature == 53
    assert blood_sugar_0.measure_state == 'FBS'
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    bool_0 = False
    bool_1 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_0)
    assert bool_1 is True
    assert blood_sugar_algorithm_0.diabetes_type_2 is False
    bool_2 = True
    blood_sugar_algorithm_1 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_1.patient is None
    assert blood_sugar_algorithm_1.hypoglycemia is None
    assert blood_sugar_algorithm_1.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_1.abnormal_bs is None
    assert blood_sugar_algorithm_1.emergency_alarm is None
    assert blood_sugar_algorithm_1.bs_type is None
    assert blood_sugar_algorithm_1.new_measurement_required is None
    assert blood_sugar_algorithm_1.new_measurement_duration_min is None
    assert blood_sugar_algorithm_1.graphic_asset is None
    assert blood_sugar_algorithm_1.message_list == []
    assert blood_sugar_algorithm_1.last_bs is None
    bool_3 = blood_sugar_algorithm_1.set_patient_medical_record(bool_0, bool_2)
    assert bool_3 is True
    assert blood_sugar_algorithm_1.diabetes_type_2 is True
    bool_4 = blood_sugar_algorithm_0.set_patient_medical_record(bool_1, bool_0)
    assert bool_4 is True
    assert blood_sugar_algorithm_0.diabetes_type_1 is True
    blood_sugar_algorithm_0.check_prev_bs(blood_sugar_0)

def test_case_15():
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    datetime_1 = module_0.random_datetime()
    int_0 = 53
    str_0 = 'FBS'
    blood_sugar_0 = module_0.BloodSugar(int_0, int_0, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 53
    assert blood_sugar_0.temperature == 53
    assert blood_sugar_0.measure_state == 'FBS'
    bool_0 = False
    bool_1 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_0)
    assert bool_1 is True
    assert blood_sugar_algorithm_0.diabetes_type_2 is False
    bool_2 = True
    str_1 = blood_sugar_algorithm_0.check_super_high_bs(blood_sugar_0)
    assert str_1 == 'SCBSN000'
    bool_3 = False
    bool_4 = blood_sugar_algorithm_0.set_patient_medical_record(bool_2, bool_3)
    assert bool_4 is True
    assert blood_sugar_algorithm_0.diabetes_type_1 is True

@pytest.mark.xfail
def test_case_16():
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    int_0 = 59
    str_0 = 'FBS'
    blood_sugar_0 = module_0.BloodSugar(int_0, int_0, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 59
    assert blood_sugar_0.temperature == 59
    assert blood_sugar_0.measure_state == 'FBS'
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    blood_sugar_algorithm_0.normal_person_faten_bs(blood_sugar_0)

@pytest.mark.xfail
def test_case_17():
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    int_0 = 59
    str_0 = 'FBS'
    blood_sugar_0 = module_0.BloodSugar(int_0, int_0, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 59
    assert blood_sugar_0.temperature == 59
    assert blood_sugar_0.measure_state == 'FBS'
    bool_0 = blood_sugar_algorithm_0.set_prev_bs_info(int_0, datetime_0, str_0)
    assert bool_0 is True
    blood_sugar_algorithm_0.check_prev_bs(blood_sugar_0)

@pytest.mark.xfail
def test_case_18():
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    int_0 = 59
    str_0 = 'FBS'
    int_1 = 489
    blood_sugar_0 = module_0.BloodSugar(int_1, int_0, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 489
    assert blood_sugar_0.temperature == 59
    assert blood_sugar_0.measure_state == 'FBS'
    bool_0 = blood_sugar_algorithm_0.set_prev_bs_info(int_0, datetime_0, str_0)
    assert bool_0 is True
    bool_1 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_0)
    assert bool_1 is True
    assert blood_sugar_algorithm_0.diabetes_type_1 is True
    blood_sugar_algorithm_0.check_super_high_bs(blood_sugar_0)

def test_case_19():
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    datetime_0 = module_0.random_datetime()
    int_0 = 60
    str_0 = 'FBS'
    blood_sugar_0 = module_0.BloodSugar(int_0, int_0, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 60
    assert blood_sugar_0.temperature == 60
    assert blood_sugar_0.measure_state == 'FBS'
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    bool_0 = False
    bool_1 = blood_sugar_algorithm_0.set_patient_medical_record(bool_0, bool_0)
    assert bool_1 is True
    assert blood_sugar_algorithm_0.diabetes_type_2 is False
    bool_2 = True
    blood_sugar_algorithm_1 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_1.patient is None
    assert blood_sugar_algorithm_1.hypoglycemia is None
    assert blood_sugar_algorithm_1.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_1.abnormal_bs is None
    assert blood_sugar_algorithm_1.emergency_alarm is None
    assert blood_sugar_algorithm_1.bs_type is None
    assert blood_sugar_algorithm_1.new_measurement_required is None
    assert blood_sugar_algorithm_1.new_measurement_duration_min is None
    assert blood_sugar_algorithm_1.graphic_asset is None
    assert blood_sugar_algorithm_1.message_list == []
    assert blood_sugar_algorithm_1.last_bs is None
    bool_3 = blood_sugar_algorithm_1.set_patient_medical_record(bool_0, bool_2)
    assert bool_3 is True
    assert blood_sugar_algorithm_1.diabetes_type_2 is True
    bool_4 = blood_sugar_algorithm_0.set_patient_medical_record(bool_1, bool_0)
    assert bool_4 is True
    assert blood_sugar_algorithm_0.diabetes_type_1 is True
    str_1 = blood_sugar_algorithm_0.check_prev_bs(blood_sugar_0)
    assert str_1 == 'SCBSN000'

@pytest.mark.xfail
def test_case_20():
    datetime_0 = module_0.random_datetime()
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    datetime_1 = module_0.random_datetime()
    int_0 = 59
    int_1 = 458
    str_0 = 'RBS'
    blood_sugar_0 = module_0.BloodSugar(int_1, int_0, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 458
    assert blood_sugar_0.temperature == 59
    assert blood_sugar_0.measure_state == 'RBS'
    blood_sugar_algorithm_0.normal_person_faten_bs(blood_sugar_0)

def test_case_21():
    blood_sugar_algorithm_0 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_0.patient is None
    assert blood_sugar_algorithm_0.hypoglycemia is None
    assert blood_sugar_algorithm_0.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_0.abnormal_bs is None
    assert blood_sugar_algorithm_0.emergency_alarm is None
    assert blood_sugar_algorithm_0.bs_type is None
    assert blood_sugar_algorithm_0.new_measurement_required is None
    assert blood_sugar_algorithm_0.new_measurement_duration_min is None
    assert blood_sugar_algorithm_0.graphic_asset is None
    assert blood_sugar_algorithm_0.message_list == []
    assert blood_sugar_algorithm_0.last_bs is None
    assert module_0.SPACE == ' '
    assert module_0.VALID_STATES == ['RBS', 'FBS', 'PBS', 'PLS', 'PDS']
    datetime_0 = module_0.random_datetime()
    int_0 = 53
    str_0 = 'FBS'
    blood_sugar_0 = module_0.BloodSugar(int_0, int_0, str_0, datetime_0)
    assert blood_sugar_0.blood_sugar == 53
    assert blood_sugar_0.temperature == 53
    assert blood_sugar_0.measure_state == 'FBS'
    assert module_1.MINYEAR == 1
    assert module_1.MAXYEAR == 9999
    int_1 = 336
    datetime_1 = module_0.random_datetime()
    bool_0 = blood_sugar_algorithm_0.set_prev_bs_info(int_1, datetime_1, str_0)
    assert bool_0 is True
    bool_1 = False
    bool_2 = blood_sugar_algorithm_0.set_patient_medical_record(bool_1, bool_1)
    assert bool_2 is True
    assert blood_sugar_algorithm_0.diabetes_type_2 is False
    bool_3 = True
    blood_sugar_algorithm_1 = module_0.BloodSugarAlgorithm()
    assert blood_sugar_algorithm_1.patient is None
    assert blood_sugar_algorithm_1.hypoglycemia is None
    assert blood_sugar_algorithm_1.persistent_hypoglycemia is None
    assert blood_sugar_algorithm_1.abnormal_bs is None
    assert blood_sugar_algorithm_1.emergency_alarm is None
    assert blood_sugar_algorithm_1.bs_type is None
    assert blood_sugar_algorithm_1.new_measurement_required is None
    assert blood_sugar_algorithm_1.new_measurement_duration_min is None
    assert blood_sugar_algorithm_1.graphic_asset is None
    assert blood_sugar_algorithm_1.message_list == []
    assert blood_sugar_algorithm_1.last_bs is None
    bool_4 = blood_sugar_algorithm_1.set_patient_medical_record(bool_1, bool_3)
    assert bool_4 is True
    assert blood_sugar_algorithm_1.diabetes_type_2 is True
    bool_5 = blood_sugar_algorithm_0.set_patient_medical_record(bool_2, bool_1)
    assert bool_5 is True
    assert blood_sugar_algorithm_0.diabetes_type_1 is True
    str_1 = blood_sugar_algorithm_0.check_prev_bs(blood_sugar_0)
    assert str_1 == 'SCBSN000'